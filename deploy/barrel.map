{"version":3,"sources":["barrel.js","js\\FileFormatter.js","js\\helpers.js","js\\StringFormatter.js","js\\FileRenderer.js"],"names":["FileFormatter","flag","defaultCssSelector","text","matched","match","replaceWith","replace","everyN","lines","replaceFlag","trim","split","groups","blocked","groupsIndex","breakCounter","map","line","goToNextGroup","isEmpty","mapObj","object","cb","newObj","index","prop","fetchFiles","urls","Object","keys","url","fetch","then","response","StringFormatter","string","Error","_string","classes","el","Boolean","newWord","makeElement","regex","newString","_replaceMarkClasses","bind","classArray","id","join","FileRenderer","options","defaultAddon","triggers","default","_bindThisToTriggers","_renderDefault","file","SF","data","removeComments","customTrigger","matchFlag","firedTriggersReturn","_emitTrigger","triggerName","args","selector","name","divs","Array","from","document","querySelectorAll","div","_displayFileNameToggle","trigger","fathers","selectors","father","fatherI","selectorI","child","childI","multiply","length","markedText","constructor","markClasses","markdown","removePTag","innerHTML","fields","fieldIndex","field","value","fileName","overlay","createElement","classList","add","insertBefore","firstChild","click","_onDynamicFieldClick","zPressed","addEventListener","ev","key","clickAmount","active","detail","stopPropagation","remove"],"mappings":"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","file":"barrel.map","sourceRoot":"..\\src","sourcesContent":["export * from './js/**.js'\r\n\r\n","\r\n\r\nexport default class FileFormatter {\r\n\r\n  /**\r\n   * @param { flag: RegExp, defaultCssSelector: string } optionsParam\r\n   */\r\n  constructor(flag = /<<(.+)>>/u, defaultCssSelector = '[field]') {\r\n\r\n    this.flag = flag\r\n    this.defaultCssSelector = defaultCssSelector\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * @param { string } text\r\n   */\r\n  matchFlag(text) {\r\n\r\n    const matched = text.match(this.flag)\r\n\r\n    return matched ? matched[1] : null\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * @param { string } text\r\n   * @param { string } replaceWith\r\n   */\r\n  replaceFlag(text, replaceWith = '\\n') {\r\n\r\n    return text.replace(this.flag, replaceWith)\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * @param { string } text\r\n   * @returns { string[] }\r\n   */\r\n  everyNthLineBreak(text, everyN = 0) {\r\n\r\n    const lines = this\r\n      .replaceFlag(text, '')\r\n      .trim()\r\n      .split(/\\r\\n|\\r|\\n/ug)\r\n\r\n    /** @type { string[] } */\r\n    const groups = []\r\n\r\n    /** Blocks consecutive breaks */\r\n    let blocked = false\r\n\r\n    let groupsIndex = 0\r\n    let breakCounter = 0\r\n\r\n    lines.map((line) => {\r\n\r\n      let goToNextGroup = false\r\n      const isEmpty = line === ''\r\n\r\n      if (!groups[groupsIndex])\r\n        groups[groupsIndex] = ''\r\n\r\n      if (isEmpty) breakCounter++\r\n      else breakCounter = 0\r\n\r\n      // if breakcounter matches param\r\n      goToNextGroup = breakCounter === everyN && everyN !== 0\r\n\r\n      groups[groupsIndex] += `${line}\\r\\n`\r\n\r\n      if (!goToNextGroup)\r\n        blocked = false\r\n\r\n      if (goToNextGroup && !blocked) {\r\n\r\n        groupsIndex++\r\n        blocked = true\r\n\r\n      }\r\n\r\n    })\r\n\r\n    return everyN === 0 ? groups[0] : groups\r\n\r\n  }\r\n\r\n}\r\n","\r\n\r\n/**\r\n * @param { {} } object\r\n * @param { (value: any, prop: string, index: number) => any } cb\r\n */\r\nexport const mapObj = (object, cb) => {\r\n\r\n  const newObj = {}\r\n  let index = 0\r\n\r\n  for (const prop in object)\r\n    newObj[prop] = cb(object[prop], prop, index++)\r\n\r\n  return newObj\r\n\r\n}\r\n\r\n\r\n/**\r\n * @returns { Promise<fileType>[] }\r\n */\r\nexport const fetchFiles = urls => Object.keys(urls)\r\n  .map(async url => ({\r\n    name: `${url}.txt`,\r\n    data: await fetch(urls[url]).then(response => response.text()),\r\n  }))\r\n\r\n\r\n","import marked from 'marked'\r\n\r\nexport default class StringFormatter {\r\n\r\n  /**\r\n   * @param { string } string\r\n   */\r\n  constructor(string) {\r\n\r\n    if (typeof string !== 'string')\r\n      throw new Error(`constructor got ${typeof string} instead of string`)\r\n\r\n    /** @type { string } */\r\n    this._string = string\r\n\r\n  }\r\n\r\n  /**\r\n   * Returns result string of formatting\r\n   * @returns {string}\r\n   */\r\n  string() {\r\n\r\n    return this._string\r\n\r\n  }\r\n\r\n  removePTag() {\r\n\r\n    return new StringFormatter(\r\n      this._string\r\n        .replace(/<p>/gu, '')\r\n        .replace(/<\\/p>/gu, '')\r\n    )\r\n\r\n  }\r\n\r\n\r\n  removeComments() {\r\n\r\n    return new StringFormatter(\r\n      this._string.replace(/\\{\\{[^]*\\}\\}/gu, '')\r\n    )\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * adds marked.js to string\r\n   */\r\n  markdown() {\r\n\r\n    return new StringFormatter(marked(this._string))\r\n\r\n  }\r\n\r\n  _replaceMarkClasses(...match) {\r\n\r\n    const { 3: text } = match\r\n    this._string = text\r\n\r\n    const classes = match[2] ? match[2].split(' ') : null\r\n    const breakLine = Boolean(match[1])\r\n\r\n    const el = breakLine ? 'div' : 'span'\r\n\r\n    const newWord = this.makeElement(el, classes)\r\n\r\n    return newWord\r\n\r\n  }\r\n\r\n  /**\r\n   * marks custom classes\r\n   */\r\n  markClasses() {\r\n\r\n    const regex = /(!?)\\{([^{}]+)*\\}(\\S+)/ug\r\n\r\n    const newString = this._string\r\n      .replace(regex, this._replaceMarkClasses.bind(this))\r\n\r\n    return new StringFormatter(newString)\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * makes a HTML element\r\n   * @param { string } el\r\n   * @param { string[] } classArray\r\n   * @param { string } [id=null]\r\n   */\r\n  makeElement(el, classArray, id = null) {\r\n\r\n    const classes = classArray ? classArray.join(' ') : null\r\n    const classesString = classes ? `class=\"${classes}\"` : ''\r\n\r\n    const idString = id ? `id=\"${id}\"` : ''\r\n\r\n    return `<${el} ${idString} ${classesString}>${this._string}</${el}>`\r\n\r\n  }\r\n\r\n\r\n}\r\n","import '../styles/dynamic-files.css'\r\n\r\nimport { mapObj } from './helpers'\r\nimport StringFormatter from './StringFormatter'\r\nimport FileFormatter from './FileFormatter'\r\n\r\nexport default class FileRenderer extends FileFormatter {\r\n\r\n\r\n  /**\r\n   * @param {{ flag: RegExp, defaultCssSelector: string, triggers: triggerParamType }} options\r\n   */\r\n  constructor(options) {\r\n\r\n    super(options.flag, options.defaultCssSelector)\r\n\r\n    // sets addon if it exists in triggers\r\n    const defaultAddon = options.triggers && options.triggers.default\r\n      ? options.triggers.default\r\n      : null\r\n\r\n\r\n    /** @type { triggerType } */\r\n    this.triggers = this._bindThisToTriggers(options.triggers)\r\n    this.triggers.default = this._renderDefault(this.defaultCssSelector, defaultAddon).bind(this)\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * @param { fileType } file\r\n   */\r\n  render(file) {\r\n\r\n    const SF = new StringFormatter(file.data)\r\n\r\n    file.data = SF.removeComments().string()\r\n\r\n    // if didn't match, it's a default\r\n    const customTrigger = this.matchFlag(file.data)\r\n\r\n    const firedTriggersReturn = customTrigger\r\n      ? this._emitTrigger(customTrigger, file)\r\n      : this._emitTrigger('default', file)\r\n\r\n    return firedTriggersReturn\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * @param { string } triggerName\r\n   * @param { fileType } file\r\n   * @param { any[] } args\r\n   */\r\n  _emitTrigger(triggerName, file, ...args) {\r\n\r\n    if (triggerName === 'default') {\r\n\r\n      return this.triggers.default(file, ...args)\r\n\r\n    }\r\n\r\n\r\n    // Takes \"name\" from \"name.txt\"\r\n    const selector = `[${file.name.match(/(.+).txt/u)[1]}]`\r\n    const divs = Array\r\n      .from(document.querySelectorAll(selector))\r\n      .map(div => {\r\n\r\n        this._displayFileNameToggle(file.name, div)\r\n        return div\r\n\r\n      })\r\n\r\n    const trigger = this.triggers[triggerName]\r\n\r\n    return trigger ? trigger(file, divs, ...args) : null\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * @param { string[] } lines\r\n   * @param { boolean } removeP\r\n   * @param { Element[] } fathers\r\n   * @param { string[] } selectors\r\n   */\r\n  renderFatherChildren(lines, fathers, selectors) {\r\n\r\n    // iterates fathers\r\n    fathers.map((father, fatherI) => {\r\n\r\n      // iterates selectors\r\n      selectors.map((selector, selectorI) => {\r\n\r\n        const children = Array.from(father.querySelectorAll(selector))\r\n\r\n        // iterates children\r\n        children.map((child, childI) => {\r\n\r\n          const multiply = childI * selectors.length\r\n          const index = selectorI + multiply\r\n\r\n          // if 2 dimentional array test\r\n          const SF = lines[0].constructor === Array\r\n            ? new StringFormatter(lines[fatherI][index])\r\n            : new StringFormatter(lines[index])\r\n\r\n          const markedText = SF\r\n            .markClasses()\r\n            .markdown()\r\n            .removePTag()\r\n            .string()\r\n\r\n          child.innerHTML = markedText\r\n\r\n        })\r\n\r\n      })\r\n\r\n    })\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * @private\r\n   * @param {string} defaultCssSelector\r\n   * @param { null | (fields: Element[]) => any } defaultAddon\r\n   * @returns { emitDefault }\r\n   */\r\n  _renderDefault(defaultCssSelector, defaultAddon) {\r\n\r\n    // Only gets run once\r\n    const fields = Array.from(document.querySelectorAll(defaultCssSelector))\r\n    let fieldIndex = 0\r\n\r\n    if (defaultAddon) defaultAddon(fields)\r\n\r\n    return file => {\r\n\r\n      const field = fields[fieldIndex++]\r\n\r\n      const markedText = new StringFormatter(file.data)\r\n        .removeComments()\r\n        .markClasses()\r\n        .markdown()\r\n        .string()\r\n\r\n      field.innerHTML = markedText\r\n      this._displayFileNameToggle(file.name, field)\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * @private\r\n   * @param { triggerParamType } triggers\r\n   * @returns { triggerType }\r\n   */\r\n  _bindThisToTriggers(triggers) {\r\n\r\n    return mapObj(triggers, value => value.bind(this))\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * @private\r\n   * @param { string } fileName\r\n   * @param { Element } field\r\n   */\r\n  _displayFileNameToggle(fileName, field) {\r\n\r\n    const overlay = document.createElement('div')\r\n    overlay.classList.add('show-file-name')\r\n    overlay.innerHTML = fileName\r\n\r\n    field.classList.add('dynamic')\r\n    field.insertBefore(overlay, field.firstChild)\r\n\r\n\r\n    const click = this._onDynamicFieldClick(overlay, 2)\r\n    let zPressed = false\r\n\r\n    window.addEventListener('keyup', (ev) => {\r\n\r\n      if (ev.key === 'z') zPressed = false\r\n\r\n    })\r\n    window.addEventListener('keydown', (ev) => {\r\n\r\n      if (ev.key === 'z') zPressed = true\r\n\r\n    })\r\n\r\n    field.addEventListener('click', ev => {\r\n\r\n      if (zPressed) click(ev)\r\n\r\n    })\r\n\r\n    overlay.addEventListener('click', click)\r\n\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param { Element } overlay\r\n   * @param { number } [clickAmount = 3]\r\n   * @returns { (e: MouseEvent) => void }\r\n   */\r\n  _onDynamicFieldClick(overlay, clickAmount = 3) {\r\n\r\n    let active = false\r\n\r\n    return ev => {\r\n\r\n      if (ev.detail < clickAmount) return\r\n      ev.stopPropagation()\r\n\r\n      active = !active\r\n\r\n      if (active)\r\n        overlay.classList.add('active')\r\n      else\r\n        overlay.classList.remove('active')\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n}\r\n"]}